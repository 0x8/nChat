#!/usr/bin/env python3

'''
Ian Guibas

This module defines the behavior of the threaded server. Splitting the modules
makes them easier to maintain. This also helps maintain readability.
'''


import socketserver
import ServerInfo
import socket
import client
import Config

'''
Intents signify what the client wants the server to do and allow the server to
respond or act accordingly.

Intents
--------

INIT_CONV:
    Sent at conversation start, this signifies the beginning of a conversation.
    Additional metadata may be sent to signify that the two have chatted before
    and an attempt should be made to authenticate the connecting client

MSG_SEND:
    The basic intent signifying that a message is about to be sent. This is sent
    along with the length of the message so that the recieving end knows not to
    kill the connection to early and/or can respond with an error after a set
    timeout.

DHS:
    This signifies that the server should start the Diffie-Hellman key exchange
    to generate a shared secret to be used with the session. In this program, an
    8 byte key is used.

DHV:
    This is sent after the key exchange to verify that the key has been
    successfully shared between the two parties. For security purposes, the
    public key of the other party is used to encrypt the message then decrypted
    and encrypted again with the senders key. If both send back DH_OK, the
    generation was successful.
                                                                                
PKC:                                                                            
    This signifies that a public key change is needed. This is to manually      
    retire old public keys and allow the use of fresh ones. Requires            
    authentication.                                                             
                                                                                
NSS:                                                                            
    This tells the server to restart the Diffi-Hellman process to create a new  
    shared secret. If the old secret is too old or believed compromised, this   
    allows the quick generation of a new one.                                   
                                                                                
UAUTH:                                                                          
    This is for basic user authentication. Password is hashed with              
    bcrypt-sha256 and stored along with user's desired username.                
                                                                                
*_ACK:                                                                          
    These acknowledge the prior protocol and are used to progress with the      
    correct response                                                            
'''                                                                             
intents = {'INIT_CONV','MSG_SEND','DHS',                                        
           'PKC','PKR','NSS','UAUTH','INIT_ACK',                                
           'MSG_SEND_ACK','DHS_ACK','PKC_ACK',                                  
           'NSS_ACK','UAUTH_ACK'}


#============================================================[ Request Handler ]
class ThreadedTCPRequestHandler(socketserver.BaseRequestHandler):

    # Primary Handling Class
    def handle(self):
        msg = str(self.request.recv(64),'utf8').strip('=')
        intent = msg.split(':')[0]

        # Determine if this is an init:
        if intent == 'INIT_CONV':
            
            
        if intent = 'INIT_ACK' or 'INIT_ACK_ACK':
            klen = int(msg.split(':')[1])

        else:
            # Only try public key decryption if a session has been established
            if self.established == TRUE:
                if self.ServerInfo.cipher = utf8
                mlen = msg.split(':')[1]
                msg = self.request.recv(mlen)
                plain = str(self.cipher.decrypt(crypt),'utf8')

    def init_conn(self, intent):
        '''Handle the initial connection to client
        This method handles the setup of an initial connection with a client.
        This requires sharing public key information and creation/establishment
        of a shared key to use with AES.
        '''
        try:
            # Pass the ACK then the rsa key that was generated by the client
            self.request.sendall(bytes('INIT_ACK:{0}'.format(len(
                                    self.ServerInfo.pubkey)),'utf8'))
            self.request.sendall(self.ServerInfo.pubkey)
            
        except socket.error as err:
            print(err)

#===============================================================[ Server Class ]
class ThreadedTCPServer(socketserver.ThreadingMixIn, socketserver.TCPServer):
    pass

def start_server():
    # Grab and set the HOST and port from config
    serverInfo = Config.Server
    PORT = serverInfo.PORT
    HOST = serverInfo.HOST

    # Create the server object and start the thread
    server = ThreadedTCPServer((HOST,PORT),ThreadedTCPRequestHandler)
    with server:
        ip,port = server.server_address
        
        # Start server thread
        server_thread = threading.Thread(target=server.serve_forever)
        server_thread.daemon = True # Exit on main thread exit
        server_thread.start()
        print('Server started in thread:', serve_thread.name)
        print('Listening on port:', port)
        
        return server, server_thread
